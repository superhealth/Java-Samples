package com.sh.thread;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;

/**
 * MyThread class
 *
 * @author lkn
 * @date 2017/11/14
 */
public class MyExcutorPool {


    public static void main(String[] args) throws Exception {

        List<Integer> numbers4 = Arrays.asList(47295, 47691, 47716, 47725, 47726, 47736, 47737, 47766, 47771, 47780, 47785, 47786, 47802, 47804, 47807, 47810, 47811, 47812, 47813, 47814, 47816, 47817, 47818, 47819, 47820, 47821, 47822, 47826, 47827, 47828, 47829, 47830, 47832, 47833, 47834, 47835, 47836, 47837, 47838, 47840, 47841, 47842, 47843, 47847, 47851, 47855, 47856, 47862, 47864, 47865, 47866, 47867, 47868, 47869, 47870, 47871, 47872, 47874, 47875, 47877, 47878, 47879, 47880, 47881, 47882, 47883, 47884, 47885, 47886, 47887, 47888, 47889, 47890, 47892, 47893, 47894, 47895, 47897, 47900, 47902, 47903, 47905, 47907, 47908, 47909, 47910, 47911, 47912, 47913, 47914, 47920, 47921, 47922, 47923, 47924, 47926, 47927, 47928, 47929, 47932, 47933, 47935, 47939, 47941, 47942, 47945, 47946, 47947, 47948, 47949, 47950, 47951, 47952, 47953, 47954, 47956, 47957, 47958, 47959, 47960, 47961, 47962, 47963, 47964, 47965, 47966, 47967, 47969, 47970, 47971, 47972, 47973, 47974, 47975, 47976, 47977, 47983, 47984, 47985, 47987, 47988, 47989, 47990, 47991, 47992, 47993, 47994, 47995, 47996, 47997, 47999, 48000, 48001, 48003, 48004, 48005, 48006, 48007, 48008, 48009, 48010, 48011, 48012, 48014, 48015, 48018, 48019, 48020, 48022, 48024, 48026, 48027, 48028, 48029, 48031, 48033, 48034, 48035, 48036, 48037, 48038, 48043, 48046, 48047, 48048, 48049, 48052, 48054, 48055, 48056, 48057, 48060, 48061, 48063, 48066, 48067, 48070, 48073, 48075, 48076, 48077, 48079, 48082, 48083, 48084, 48085, 48086, 48087, 48088, 48089, 48090, 48091, 48092, 48094, 48095, 48096, 48097, 48098, 48099, 48101, 48102, 48103, 48104, 48105, 48106, 48107, 48108, 48109, 48110, 48111, 48112, 48114, 48115, 48116, 48117, 48118, 48119, 48120, 48122, 48124, 48128, 48129, 48130, 48131, 48132, 48133, 48134, 48136, 48137, 48140, 48141, 48142, 48143, 48144, 48145, 48146, 48148, 48149, 48150, 48154, 48156, 48157, 48158, 48160, 48161, 48163, 48164, 48165, 48167, 48168, 48169, 48170, 48171, 48172, 48174, 48175, 48176, 48178, 48179, 48182, 48184, 48185, 48186, 48188, 48189, 48190, 48191, 48192, 48193, 48194, 48195, 48196, 48197, 48198, 48199, 48200, 48202, 48203, 48204, 48205, 48207, 48208, 48211, 48212, 48213, 48214, 48215, 48218, 48222, 48223, 48226, 48228, 48229, 48230, 48231, 48232, 48233, 48234, 48236, 48238, 48239, 48240, 48241, 48242, 48243, 48244, 48245, 48246, 48247, 48248, 48249, 48250, 48251, 48252, 48253, 48254, 48255, 48256, 48257, 48258, 48260, 48261, 48262, 48263, 48265, 48269, 48271, 48272, 48273, 48274, 48275, 48276, 48277, 48279, 48282, 48284, 48285, 48286, 48287, 48288, 48292, 48294, 48296, 48297, 48298, 48299, 48302, 48305, 48307, 48308, 48309, 48310, 48311, 48312, 48313, 48315, 48316, 48317, 48318, 48320, 48321, 48322, 48323, 48326, 48327, 48328, 48329, 48330, 48331, 48333, 48334, 48335, 48336, 48337, 48338, 48340, 48341, 48344, 48345, 48346, 48347, 48348, 48349, 48351, 48354, 48355, 48357, 48358, 48359, 48361, 48363, 48364, 48365, 48367, 48368, 48371, 48372, 48373, 48374, 48375, 48376, 48377, 48378, 48379, 48387, 48388, 48390, 48392, 48394, 48397, 48398, 48399, 48401, 48402, 48405, 48409, 48410, 48411, 48412, 48415, 48419, 48421, 48424, 48425, 48426, 48427, 48430, 48431, 48432, 48433, 48437, 48438, 48440, 48441, 48442, 48444, 48445, 48447, 48448, 48449, 48450, 48451, 48452, 48453, 48454, 48455, 48456, 48457, 48458, 48459, 48460, 48461, 48462, 48463, 48466, 48467, 48468, 48470, 48471, 48472, 48473, 48475, 48476, 48477, 48478, 48479, 48480, 48481, 48485, 48486, 48489, 48490, 48493, 48494, 48496, 48497, 48498, 48499, 48500, 48501, 48502, 48503, 48504, 48505, 48506, 48507, 48508, 48509, 48510, 48512, 48513, 48514, 48516, 48518, 48519, 48520, 48521, 48523, 48525, 48527, 48528, 48529, 48530, 48531, 48532, 48533, 48535, 48536, 48537, 48538, 48539, 48540, 48542, 48543, 48544, 48546, 48548, 48551, 48552, 48553, 48554, 48555, 48556, 48557, 48558, 48559, 48560, 48565, 48566, 48567, 48568, 48569, 48570, 48571, 48572, 48574, 48575, 48578, 48579, 48583, 48584, 48585, 48586, 48587, 48588, 48589, 48591, 48592, 48593, 48594, 48595, 48596, 48597, 48598, 48599, 48600, 48601, 48602, 48603, 48605, 48606, 48607, 48608, 48610, 48611, 48613, 48614, 48615, 48616, 48618, 48619, 48620, 48622, 48623, 48624, 48625, 48626, 48627, 48628, 48629, 48631, 48635, 48636, 48639, 48640, 48641, 48643, 48644, 48645, 48646, 48647, 48648, 48650, 48651, 48653, 48654, 48656, 48657, 48658, 48659, 48660, 48661, 48662, 48663, 48666, 48667, 48669, 48670, 48671, 48672, 48673, 48674, 48675, 48678, 48680, 48681, 48682, 48687, 48692, 48694, 48695, 48696, 48697, 48699, 48701, 48703, 48704, 48707, 48709, 48710, 48711, 48717, 48719, 48720, 48721, 48722, 48725, 48728, 48730, 48732, 48733, 48734, 48735, 48736, 48738, 48739, 48740, 48741, 48743, 48744, 48745, 48747, 48748, 48749, 48750, 48755, 48757, 48759, 48760, 48761, 48762, 48763, 48764, 48765, 48766, 48767, 48769, 48770, 48771, 48772, 48773, 48774, 48776, 48777, 48778, 48779, 48780, 48781, 48782, 48783, 48784, 48785, 48787, 48789, 48791, 48792, 48794, 48795, 48796, 48799, 48800, 48801, 48802, 48803, 48805, 48806, 48807, 48809, 48811, 48812, 48813, 48815, 48816, 48818, 48819, 48820, 48821, 48822, 48823, 48826, 48828, 48829, 48830, 48831, 48832, 48833, 48834, 48837, 48843, 48845, 48846, 48847, 48850, 48853, 48854, 48855, 48856, 48858, 48859, 48860, 48861, 48862, 48863, 48864, 48865, 48866, 48869, 48870, 48871, 48872, 48873, 48874, 48877, 48879, 48880, 48881, 48882, 48883, 48885, 48886, 48887, 48888, 48889, 48890, 48892, 48893, 48896, 48897, 48898, 48899, 48900, 48901, 48902, 48903, 48905, 48907, 48908, 48909, 48910, 48912, 48913, 48914, 48915, 48916, 48917, 48918, 48922, 48923, 48924, 48925, 48926, 48927, 48929, 48930, 48932, 48933, 48934, 48935, 48936, 48940, 48941, 48942, 48943, 48945, 48946, 48947, 48948, 48949, 48951, 48952, 48953, 48954, 48955, 48956, 48957, 48958, 48959, 48960, 48961, 48962, 48963, 48964, 48965, 48966, 48967, 48968, 48969, 48970, 48971, 48972, 48973, 48974, 48975, 48976, 48977, 48978, 48979, 48980, 48981, 48984, 48986, 48988, 48989, 48991, 48992, 48994, 48995, 48996, 48997, 48998, 49000, 49005, 49009, 49010, 49011, 49012, 49013, 49014, 49015, 49016, 49019, 49020, 49021, 49024, 49025, 49027, 49028, 49029, 49031, 49032, 49039, 49040, 49042, 49044, 49045, 49046, 49047, 49048, 49049, 49050, 49052, 49053, 49054, 49055, 49056, 49057, 49058, 49059, 49060, 49061, 49062, 49063, 49064, 49065, 49066, 49067, 49068, 49070, 49072, 49073, 49076, 49078, 49079, 49080, 49081, 49083, 49084, 49085, 49086, 49087, 49088, 49089, 49090, 49091, 49092, 49093, 49095, 49096, 49097, 49098, 49099, 49100, 49101, 49102, 49104, 49105, 49106, 49107, 49108, 49109, 49110, 49111, 49112, 49113, 49114, 49115, 49116, 49117, 49119, 49120, 49122, 49123, 49124, 49125, 49126, 49127, 49128, 49129, 49132, 49133, 49134, 49135, 49137, 49138, 49140, 49142, 49143, 49145, 49146, 49148, 49149, 49150, 49153, 49154, 49155, 49156, 49158, 49159, 49161, 49163, 49164, 49165, 49166, 49167, 49168, 49170, 49171, 49172, 49173, 49176, 49178, 49179, 49181, 49182, 49185, 49186, 49187, 49189, 49190, 49192);

        int availableCpuCoreNum = Runtime.getRuntime().availableProcessors();
        int workerNum = availableCpuCoreNum * 2;
        BlockingQueue<Runnable> taskQueue = new ArrayBlockingQueue(numbers4.size());
        ExecutorService workExecutor = new ThreadPoolExecutor(workerNum, workerNum, 0L, TimeUnit.MILLISECONDS, taskQueue);

        for (int i = 0; i < numbers4.size(); i++) {
            SemaphoreThread thread = new SemaphoreThread(numbers4.get(i));
            workExecutor.execute(thread);
            System.out.println(" run thread:" + i);
        }
    }

    public static class SemaphoreThread implements Runnable {

        Integer number;

        public SemaphoreThread(Integer number) {
            this.number = number;
        }

        @Override
        public void run() {
            try {
                System.out.println(Thread.currentThread().getName() + " execute task. " + number);
                sleep(2);
                System.out.println(Thread.currentThread().getName() + " finished task. " + number);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


        private void sleep(int seconds) {
            try {
                TimeUnit.SECONDS.sleep(seconds);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
